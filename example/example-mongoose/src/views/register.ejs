<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register</title>
    <script>
        // Utility functions for base64url conversion
        function base64URLToArrayBuffer(base64url) {
            const padding = '='.repeat((4 - (base64url.length % 4)) % 4);
            const base64 = (base64url + padding).replace(/-/g, '+').replace(/_/g, '/');
            const binary = atob(base64);
            return Uint8Array.from(binary, (c) => c.charCodeAt(0)).buffer;
        }

        function arrayBufferToBase64URL(buffer) {
            return btoa(String.fromCharCode(...new Uint8Array(buffer)))
                .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
        }

        async function startWebAuthnRegistration(event) {
            event.preventDefault();
            const email = document.getElementById('email').value.trim();
            const submitButton = document.getElementById('register-btn');

            if (!email) return alert('Email is required!');
            submitButton.disabled = true;

            try {
                // Step 1: Request a registration challenge (GET)
                const challengeResponse = await fetch(`/webauthn/register?email=${encodeURIComponent(email)}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (!challengeResponse.ok) {
                    const error = await challengeResponse.json();
                    throw new Error(error.error || 'Failed to get challenge');
                }

                const options = await challengeResponse.json();
                console.log("Received challenge:", options.challenge);

                // Convert challenge and user id from base64url to ArrayBuffer
                options.challenge = base64URLToArrayBuffer(options.challenge);
                options.user.id = base64URLToArrayBuffer(options.user.id);

                // Convert excludeCredentials ids if present
                if (options.excludeCredentials) {
                    options.excludeCredentials = options.excludeCredentials.map(cred => ({
                        ...cred,
                        id: base64URLToArrayBuffer(cred.id)
                    }));
                }

                // Step 2: Create a new credential via the authenticator
                const credential = await navigator.credentials.create({ publicKey: options });
                if (!credential) throw new Error('Failed to create credential');

                console.log("Credential created:", credential);

                // Prepare the credential for sending to the server
                const registrationResponse = {
                    id: credential.id,
                    rawId: arrayBufferToBase64URL(credential.rawId),
                    type: credential.type,
                    response: {
                        clientDataJSON: arrayBufferToBase64URL(credential.response.clientDataJSON),
                        attestationObject: arrayBufferToBase64URL(credential.response.attestationObject)
                    }
                };

                // Step 3: Send the credential to the server for verification (POST)
                const registerCallbackResponse = await fetch('/webauthn/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, credential: registrationResponse })
                });

                const result = await registerCallbackResponse.json();
                if (result.user) {
                    window.location.href = '/account';
                } else {
                    throw new Error(result.error || 'Registration failed');
                }
            } catch (error) {
                console.error('Registration Error:', error);
                alert('Registration failed: ' + error.message);
            } finally {
                submitButton.disabled = false;
            }
        }
    </script>
</head>
<body>
<h1>Register</h1>
<form onsubmit="startWebAuthnRegistration(event)">
    <input type="email" id="email" placeholder="Enter Email" required>
    <button type="submit" id="register-btn">Register</button>
</form>
</body>
</html>