<% layout('layout') -%>
<h1>Register</h1>
<form id="register-form">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required />
    <button type="submit">Register</button>
</form>
<script>
    const registerForm = document.getElementById('register-form');
    registerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const username = document.getElementById('username').value;

        // Step 1: Create User
        const res1 = await fetch('/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username }),
        });

        const options = await res1.json();

        // Step 2: Create Credential
        const credential = await navigator.credentials.create({
            publicKey: options,
        });

        // Convert ArrayBuffers to strings
        const attestationObject = bufferToBase64Url(credential.response.attestationObject);
        const clientDataJSON = bufferToBase64Url(credential.response.clientDataJSON);

        // Step 3: Send Credential to Server
        const res2 = await fetch('/register/callback', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                username,
                response: {
                    id: credential.id,
                    rawId: bufferToBase64Url(credential.rawId),
                    response: {
                        attestationObject,
                        clientDataJSON,
                    },
                    type: credential.type,
                    // Include any extensions if used
                },
            }),
        });

        if (res2.ok) {
            alert('Registration successful!');
            window.location.href = '/login';
        } else {
            const error = await res2.text();
            alert('Registration failed: ' + error);
        }
    });

    function bufferToBase64Url(buffer) {
        return btoa(String.fromCharCode(...new Uint8Array(buffer)))
            .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
    }
</script>